CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)
PROJECT(ws-rnn)

SET(PROGRAM_NAME ws-rnn)
SET(CMAKE_CXX_FLAGS "-Wall -std=c++11 -march=native -funroll-loops -D__STDC_FORMAT_MACROS -O3")
IF ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
  IF (NOT ("${CMAKE_C_COMPILER_VERSION}" VERSION_LESS "4.3"))
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
  ENDIF ()
ENDIF()

OPTION(NOTHREAD "disable threads" OFF)
OPTION(TEST "build unit tests" ON)
OPTION(CUDA "cuda support" ON)

SET(SOURCE_DIR src)
SET(THIRD_PARTY_DIR ${SOURCE_DIR}/third_party)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DEIGEN_DONT_PARALLELIZE")
INCLUDE_DIRECTORIES(${THIRD_PARTY_DIR}/eigen_3.2.10)

IF (NOTHREAD)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNOTHREAD")
ELSE ()
  FIND_PACKAGE(Threads REQUIRED)
  IF (THREADS_HAVE_PTHREAD_ARG)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
  ENDIF()
ENDIF ()

IF (APPLE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNORT")
ENDIF ()

IF (CUDA)
  FIND_PACKAGE(CUDA QUIET)
ENDIF()

SET(RNN_SOURCE_DIR ${SOURCE_DIR}/rnn)
INCLUDE_DIRECTORIES(${RNN_DIR})
INCLUDE_DIRECTORIES(${RNN_DIR}/layers)

# Build rnnlm
SET(SOURCE_FILES
  ${RNN_SOURCE_DIR}/hs.cc
  ${RNN_SOURCE_DIR}/maxent.cc
  ${RNN_SOURCE_DIR}/nce.cc
  ${RNN_SOURCE_DIR}/nnet.cc
  ${RNN_SOURCE_DIR}/words.cc
  ${RNN_SOURCE_DIR}/layers/gru_layer.cc
  ${RNN_SOURCE_DIR}/layers/interface.cc
  ${RNN_SOURCE_DIR}/layers/layer_stack.cc
  ${RNN_SOURCE_DIR}/layers/scrn_layer.cc
  ${RNN_SOURCE_DIR}/layers/simple_layer.cc)

IF (CUDA_FOUND)
  SET(CUDA_NVCC_FLAGS -std=c++11 -O3)
  SET(CUDA_SEPARABLE_COMPILATION ON)
  CUDA_ADD_EXECUTABLE(${PROGRAM_NAME} ${RNN_SOURCE_DIR}/rnnlm.cc ${RNN_SOURCE_DIR}/cuda_softmax.cu ${SOURCE_FILES})
  CUDA_ADD_CUBLAS_TO_TARGET(${PROGRAM_NAME})
ELSE ()
  ADD_DEFINITIONS(-DNOCUDA)

  ADD_EXECUTABLE(${PROGRAM_NAME} ${RNN_SOURCE_DIR}/rnnlm.cc ${SOURCE_FILES})

  TARGET_LINK_LIBRARIES(${PROGRAM_NAME} m stdc++)

  IF (NOT NOTHREAD AND CMAKE_THREAD_LIBS_INIT)
    TARGET_LINK_LIBRARIES(${PROGRAM_NAME} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF ()

  IF (NOT APPLE)
    TARGET_LINK_LIBRARIES(${PROGRAM_NAME} rt)
  ENDIF ()
ENDIF()


# Build unit tests
IF (TEST)
  SET(UNIT_TEST_NAME unittests)

  ADD_DEFINITIONS(-DNOCUDA)

  ADD_SUBDIRECTORY(${THIRD_PARTY_DIR}/googletest-release-1.7.0)
  ENABLE_TESTING()
  INCLUDE_DIRECTORIES(${gtest_SOURCE_DIR} ${gtest_SOURCE_DIR}/include)

  SET(UNIT_TEST_FILES
    ${SOURCE_FILES}
    ${RNN_SOURCE_DIR}/hs_test.cc
    ${RNN_SOURCE_DIR}/util_test.cc
    ${RNN_SOURCE_DIR}/layers/activation_test.cc
    ${RNN_SOURCE_DIR}/layers/layer_test.cc
    ${RNN_SOURCE_DIR}/layers/base_grad_test.cc)

  ADD_EXECUTABLE(${UNIT_TEST_NAME} ${RNN_SOURCE_DIR}/rnnlm_tests.cc ${UNIT_TEST_FILES})

  IF (NOT NOTHREAD AND CMAKE_THREAD_LIBS_INIT)
    TARGET_LINK_LIBRARIES(${UNIT_TEST_NAME} ${CMAKE_THREAD_LIBS_INIT})
  ENDIF ()

  TARGET_LINK_LIBRARIES(${UNIT_TEST_NAME}
    gtest
    gtest_main
  )
ENDIF ()
